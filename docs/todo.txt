# Voice Expense Tracker - План розробки

## 1. Підготовка середовища розробки
- [x] Створити віртуальне середовище (venv або Poetry) - створено pyproject.toml для Poetry
- [x] Створити файл .env з шаблоном для секретів (Telegram Token, OpenAI API Key, тощо) - створено .env.example
- [x] Створити docker-compose.yml для PostgreSQL
- [x] Створити requirements.txt з необхідними залежностями
- [x] Налаштувати Git та додати .gitignore

## 2. Налаштування бази даних
- [x] Створити моделі SQLAlchemy:
  - [x] Таблиця expenses для записів витрат
  - [x] Таблиця budget_limits для лімітів по категоріях
- [x] Написати базові CRUD-операції для взаємодії з базою даних
- [x] Створити функцію для заповнення бази даних тестовими даними при першому запуску (приклади витрат та ліміти для категорій)

## 3. Розробка Telegram бота
- [x] Створити модуль telegram_bot
- [x] Налаштувати bot.py для ініціалізації та запуску бота
- [x] Створити базові хендлери для обробки команд (/start, /help)
- [x] Створити хендлери для обробки голосових повідомлень
- [x] Створити хендлери для обробки текстових повідомлень

## 4. Інтеграція з Whisper API
- [x] Створити модуль whisper_transcriber
- [x] Налаштувати transcriber.py для взаємодії з Whisper API
- [x] Створити функцію для завантаження та обробки голосових повідомлень
- [x] Реалізувати функцію для транскрипції голосу в текст українською

## 5. Розробка AI-агента
- [x] Створити модуль ai_agent
- [x] Налаштувати intent_classifier.py для класифікації намірів користувача:
  - [x] Розпізнавання запису витрат
  - [x] Розпізнавання запитів на аналітику
  - [x] Розпізнавання непідтримуваних запитів
- [x] Налаштувати expense_parser.py для витягування інформації про витрати:
  - [x] Визначення суми
  - [x] Визначення категорії
  - [x] Визначення опису
  - [x] Визначення дати (якщо вказана)
- [x] Налаштувати analytics_agent.py для аналізу витрат:
  - [x] Аналіз витрат по категоріях
  - [x] Перевірка перевищення лімітів
  - [x] Формування текстових відповідей на аналітичні запити

## 6. Розробка утиліт та допоміжних функцій
- [x] Створити модуль utils
- [x] Реалізувати helpers.py з корисними функціями:
  - [x] Форматування дат
  - [x] Валідація даних
  - [x] Логування

## 7. Налаштування конфігурації
- [x] Створити модуль config
- [x] Налаштувати settings.py для зберігання параметрів додатку:
  - [x] Конфігурація бази даних
  - [x] API ключі
  - [x] Стандартні ліміти по категоріях
  - [x] Інші налаштування

## 8. Розробка логіки обробки і збереження витрат
- [x] Реалізувати повний цикл обробки голосових повідомлень:
  - [x] Отримання голосового повідомлення -> транскрипція -> аналіз -> збереження
- [x] Реалізувати логіку перевірки лімітів при додаванні нової витрати
- [x] Реалізувати сповіщення про перевищення лімітів

## 9. Розробка аналітичних можливостей
- [x] Реалізувати обробку аналітичних запитів:
  - [x] Аналіз витрат за період
  - [x] Аналіз витрат по категорії
  - [x] Відображення залишку в межах лімітів

## 10. Тестування
- [x] Створити модуль tests
- [x] Написати тести для LLM-парсера витрат
- [x] Написати тести для взаємодії з Telegram ботом
- [x] Написати тести для запитів до бази даних
- [x] Провести інтеграційне тестування всіх компонентів

## 11. Фінальна інтеграція та запуск
- [x] Створити run.py для запуску додатку
- [x] Налаштувати логування
- [x] Перевірити всі компоненти на взаємодію
- [x] Протестувати додаток у реальних умовах

## 12. Документація
- [x] Створити README.md з описом проєкту та інструкціями з встановлення
- [x] Додати коментарі до коду
- [x] Підготувати документацію з користування ботом
