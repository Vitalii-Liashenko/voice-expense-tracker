voice_expense_tracker/
│
├── .env                        # Environment variables (Telegram Token, OpenAI API Key, DB_URL, etc.)
├── .gitignore                  # Specifies intentionally untracked files that Git should ignore
├── README.md                   # Project overview and setup instructions
├── config.py                   # Project configuration (database, API keys, settings)
├── docker-compose.yml          # Docker Compose configuration for services (e.g., PostgreSQL)
├── requirements.txt            # Python project dependencies
├── run.py                      # Main entry point to run the application
│
├── ai_agent/                   # Modules related to AI processing and decision making
│   ├── analytics_agent.py      # LLM agent for handling analytical queries (e.g., using LangChain SQL tool)
│   └── expenses_agent.py       # LLM agent for parsing expense details from messages
│
├── db/                         # Database related modules
│   ├── database.py             # Database connection setup (e.g., SQLAlchemy engine, session)
│   ├── models.py               # SQLAlchemy ORM models for database tables (e.g., expenses, users)
│   └── queries.py              # CRUD operations and other database query functions
│
├── docs/                       # Project documentation
│   ├── project_structure       # This file: outlines the project's directory and file structure
│   ├── prd.md                  # Product Requirements Document
│   ├── business_requirements.md # Business requirements
│   ├── technical_requirements.md # Technical requirements
│   └── todo.txt                # TODO list for the project
│
├── telegram_bot/               # Modules for the Telegram bot interface
│   ├── bot.py                  # Core Telegram bot logic, including dispatcher setup
│   ├── handlers.py             # Message handlers for various commands and message types
│   └── message_processor.py    # Processes incoming messages before handing to AI agents
│
├── tests/                      # Automated tests for the project
│   ├── test_parser.py          # (Example) Tests for expense parsing logic
│   ├── test_bot.py             # (Example) Tests for Telegram bot interactions
│   └── test_db.py              # (Example) Tests for database operations
│                               # (Note: Actual test files may vary)
│
└── tools/                      # Utility scripts and standalone tools
    ├── intent_classifier.py    # LLM-based intent classification (expense, query, etc.)
    ├── transcriber.py          # Voice-to-text transcription (e.g., using Whisper API)
    └── translator.py           # Text translation capabilities
