"""
–û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥ —Ç–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è Telegram –±–æ—Ç–∞.
"""
import os
import logging
from telegram import Update
from telegram.ext import ContextTypes
from telegram.constants import ParseMode

from db.database import get_db_session
from db.queries import save_expense, check_budget_limit, get_remaining_budget, seed_test_data
from ai_agent.open_ai_intent_classifier import classify_intent
from ai_agent.open_ai_expense_parser import parse_expense, ExpenseParser
from ai_agent.open_ai_analytics_agent import generate_analytics
from whisper_transcriber import download_voice_message, transcribe_audio
from config import AUTHOR_USER_ID

AUTHOR_USER_ID = AUTHOR_USER_ID

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

async def start_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start."""
    user_id = update.effective_user.id
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
    if user_id != AUTHOR_USER_ID:
        await update.message.reply_text(
            "–í–∏–±–∞—á—Ç–µ, –∞–ª–µ –≤–∏ –Ω–µ –º–∞—î—Ç–µ –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—å–æ–≥–æ –±–æ—Ç–∞."
        )
        return
    
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –∑ —Ç–µ—Å—Ç–æ–≤–∏–º–∏ –¥–∞–Ω–∏–º–∏
    db = get_db_session()
    try:
        seed_test_data(db, user_id)
        await update.message.reply_text(
            "–ü—Ä–∏–≤—ñ—Ç! –Ø - –≤–∞—à AI-–±—É—Ö–≥–∞–ª—Ç–µ—Ä. –í–∏ –º–æ–∂–µ—Ç–µ:\n"
            "- –í—ñ–¥–ø—Ä–∞–≤–ª—è—Ç–∏ –≥–æ–ª–æ—Å–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –≤–∏—Ç—Ä–∞—Ç–∏\n"
            "- –ó–∞–ø–∏—Ç—É–≤–∞—Ç–∏ –∞–Ω–∞–ª—ñ—Ç–∏–∫—É –≤–∏—Ç—Ä–∞—Ç\n"
            "- –û—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –ø–µ—Ä–µ–≤–∏—â–µ–Ω–Ω—è –ª—ñ–º—ñ—Ç—ñ–≤\n"
            "\n"
            "–°–ø—Ä–æ–±—É–π—Ç–µ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –≤–∏—Ç—Ä–∞—Ç–æ—é, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥:\n"
            "'–ö—É–ø–∏–≤ –ø—Ä–æ–¥—É–∫—Ç–∏ –∑–∞ 300 –≥—Ä–∏–≤–µ–Ω—å'"
        )
    finally:
        db.close()

async def help_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /help."""
    await update.message.reply_text(
        "–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n"
        "/start - –ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É –∑ –±–æ—Ç–æ–º\n"
        "/help - –¶—è –¥–æ–ø–æ–º–æ–≥–∞\n\n"
        "–í–∏ –º–æ–∂–µ—Ç–µ:\n"
        "- –í—ñ–¥–ø—Ä–∞–≤–ª—è—Ç–∏ –≥–æ–ª–æ—Å–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –≤–∏—Ç—Ä–∞—Ç–∏\n"
        "- –ó–∞–ø–∏—Ç—É–≤–∞—Ç–∏ –∞–Ω–∞–ª—ñ—Ç–∏–∫—É –≤–∏—Ç—Ä–∞—Ç –≥–æ–ª–æ—Å–æ–º –∞–±–æ —Ç–µ–∫—Å—Ç–æ–º\n"
        "- –û—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –ø–µ—Ä–µ–≤–∏—â–µ–Ω–Ω—è –ª—ñ–º—ñ—Ç—ñ–≤"
    )

async def process_text_with_nlp(update: Update, text: str):
    """
    –û–±—Ä–æ–±–ª—è—î —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ NLP –ø–∞–π–ø–ª–∞–π–Ω.
    
    1. –ö–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—è –Ω–∞–º—ñ—Ä—É
    2. –†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç –∞–±–æ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏
    3. –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç –∞–±–æ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    
    Args:
        update: –û–±'—î–∫—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è Telegram
        text: –¢–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–æ–±–∫–∏
    """
    user_id = update.effective_user.id
    
    # 1. –ö–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—è –Ω–∞–º—ñ—Ä—É
    logger.info(f"–ö–ª–∞—Å–∏—Ñ—ñ–∫—É—î–º–æ –Ω–∞–º—ñ—Ä: '{text}'")
    intent = classify_intent(text)
    logger.info(f"–†–æ–∑–ø—ñ–∑–Ω–∞–Ω–∏–π –Ω–∞–º—ñ—Ä: {intent}")
    
    if intent == "expense":
        # 2. –ü–∞—Ä—Å–∏–Ω–≥ –≤–∏—Ç—Ä–∞—Ç–∏
        logger.info("–û–±—Ä–æ–±–ª—è—î–º–æ —è–∫ –≤–∏—Ç—Ä–∞—Ç—É")
        expense = parse_expense(text)
        
        if expense:
            # 3. –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç–∏ –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö
            logger.info(f"–†–æ–∑–ø—ñ–∑–Ω–∞–Ω–∞ –≤–∏—Ç—Ä–∞—Ç–∞: {expense}")
            db = get_db_session()
            try:
                # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑ –ø–∞—Ä—Å–∏–Ω–≥—É
                amount = expense["amount"]
                category = expense["category"]
                description = expense["description"]
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–µ—Ä–µ–≤–∏—â–µ–Ω–Ω—è –ª—ñ–º—ñ—Ç—É
                is_over, remaining = check_budget_limit(db, user_id, category, amount)
                
                # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–∏—Ç—Ä–∞—Ç—É
                saved_expense = save_expense(
                    db, 
                    user_id, 
                    category, 
                    amount, 
                    description,
                    text  # transcript - –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π —Ç–µ–∫—Å—Ç
                )
                
                # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                message = f"‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–æ –≤–∏—Ç—Ä–∞—Ç—É: <b>{amount:.2f} –≥—Ä–Ω</b> ({category})\n"
                message += f"üìù –û–ø–∏—Å: {description}\n"
                
                # –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ª—ñ–º—ñ—Ç
                if is_over:
                    message += f"\n‚ö†Ô∏è <b>–£–≤–∞–≥–∞!</b> –í–∏ –ø–µ—Ä–µ–≤–∏—â–∏–ª–∏ –ª—ñ–º—ñ—Ç —É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó <b>{category}</b>.\n"
                    message += f"–ü–µ—Ä–µ–≤–∏—â–µ–Ω–Ω—è: <b>{abs(remaining):.2f} –≥—Ä–Ω</b>"
                else:
                    message += f"\nüí∞ –ó–∞–ª–∏—à–æ–∫ —É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó <b>{category}</b>: <b>{remaining:.2f} –≥—Ä–Ω</b>"
                
                await update.message.reply_text(message, parse_mode=ParseMode.HTML)
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏: {e}")
                await update.message.reply_text(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏: {str(e)}")
            finally:
                db.close()
        else:
            await update.message.reply_text(
                "–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤–∏—Ç—Ä–∞—Ç—É. "
                "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å —Å—É–º—É —Ç–∞ –æ–ø–∏—Å –≤–∏—Ç—Ä–∞—Ç–∏ —è—Å–Ω—ñ—à–µ."
            )
    elif intent == "analytics":
        # 2. –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏
        logger.info("–û–±—Ä–æ–±–ª—è—î–º–æ —è–∫ –∑–∞–ø–∏—Ç –Ω–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫—É")
        try:
            analytics_response = generate_analytics(text)
            await update.message.reply_text(analytics_response, parse_mode=ParseMode.HTML)
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏: {e}")
            await update.message.reply_text(
                "–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞–ø–∏—Ç—É –Ω–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
            )
    else:
        # –ù–µ–≤—ñ–¥–æ–º–∏–π –Ω–∞–º—ñ—Ä
        logger.info("–ù–µ–≤—ñ–¥–æ–º–∏–π –Ω–∞–º—ñ—Ä")
        await update.message.reply_text(
            "–í–∏–±–∞—á—Ç–µ, —è –Ω–µ –∑—Ä–æ–∑—É–º—ñ–≤ –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –í–∏ –º–æ–∂–µ—Ç–µ:\n"
            "- –ó–∞–ø–∏—Å–∞—Ç–∏ –≤–∏—Ç—Ä–∞—Ç—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, '–ö—É–ø–∏–≤ –ø—Ä–æ–¥—É–∫—Ç–∏ –∑–∞ 300 –≥—Ä–Ω')\n"
            "- –ó–∞–ø–∏—Ç–∞—Ç–∏ –∞–Ω–∞–ª—ñ—Ç–∏–∫—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, '–°–∫—ñ–ª—å–∫–∏ —è –≤–∏—Ç—Ä–∞—Ç–∏–≤ –Ω–∞ —ó–∂—É —Ü—å–æ–≥–æ –º—ñ—Å—è—Ü—è?')"
        )

async def voice_message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –≥–æ–ª–æ—Å–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å."""
    user_id = update.effective_user.id
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
    if user_id != AUTHOR_USER_ID:
        return
    
    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    voice_file = await update.message.voice.get_file()
    
    # –ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—Ä–æ –ø–æ—á–∞—Ç–æ–∫ –æ–±—Ä–æ–±–∫–∏
    processing_message = await update.message.reply_text("üîÑ –û–±—Ä–æ–±–ª—è—é –≤–∞—à–µ –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è...")
    
    try:
        # 1. –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        logger.info("–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
        audio_path = await download_voice_message(voice_file)
        
        # 2. –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—è –≥–æ–ª–æ—Å—É –≤ —Ç–µ–∫—Å—Ç
        logger.info("–¢—Ä–∞–Ω—Å–∫—Ä–∏–±—É—î–º–æ –∞—É–¥—ñ–æ —É —Ç–µ–∫—Å—Ç")
        transcribed_text = await transcribe_audio(audio_path)
        
        # –ü–æ–∫–∞–∑–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–∏–π —Ç–µ–∫—Å—Ç
        await processing_message.edit_text(f"üî§ –†–æ–∑–ø—ñ–∑–Ω–∞–Ω–∏–π —Ç–µ–∫—Å—Ç: \"{transcribed_text}\"")
        
        # 3. –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç—É —á–µ—Ä–µ–∑ NLP –ø–∞–π–ø–ª–∞–π–Ω
        await process_text_with_nlp(update, transcribed_text)
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
        await update.message.reply_text(
            "–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
        )

async def text_message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å."""
    user_id = update.effective_user.id
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
    if user_id != AUTHOR_USER_ID:
        return
    
    message = update.message.text
    
    # –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç—É —á–µ—Ä–µ–∑ NLP –ø–∞–π–ø–ª–∞–π–Ω
    await process_text_with_nlp(update, message)
